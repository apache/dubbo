// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package org.apache.dubbo.triple.metadata;

option java_multiple_files = true;
option java_outer_classname = "MetadataProto";

/**
  Represents a request to retrieve metadata for a specific revision.
*/
message MetaRequest {
  string revision = 1; // The revision for which metadata is being requested
}
/**
  Represents a response to a metadata request.
*/
message MetaResponse {
  ResponseStatus status = 1; // The status of the response
  string app = 2; // The name of the application
  string revision = 3; // The revision for which metadata is being returned
  map<string, ServiceInfo> services = 4; // A map of service names to service information
}
/**
  Represents information about a service.
*/
message ServiceInfo {
  string name = 1; // The name of the service
  string group = 2; // The group of the service
  string version = 3; // The version of the service
  string protocol = 4; // The protocol used by the service
  int32 port = 5; // The port on which the service is running
  string path = 6; // The path of the service
  map<string, string> params = 7; // A map of parameter names to parameter values for the service
}
/**
  Represents a request to retrieve all metadata.
*/
message AllMetaRequest {}
/**
  Represents a response containing all metadata.
*/
message AllMetaResponse{
  ResponseStatus status = 1; // The status of the response
  repeated MetaResponse allMetadata = 2; // A repeated field of MetaResponse messages for all metadata
}
/**
  Represents the status of a metadata response.
*/
enum ResponseStatus {
  REVISION_UN_FIND = 0; // The requested revision was not found
  NO_METADATA = 1; // There is no metadata available
  SUCCESS = 2; // The request was successful
  SERVICE_NOT_REGISTER = 4; // The requested service is not registered
}

/**
  This service provides point-to-point metadata retrieval functionality for multiple languages,
  which can be used by providers and consumers. Triple or gRPC clients only need to specify the application
  address to retrieve metadata (e.g. tri://anyhost:anyport), and configure the service interface to be
  Metadata generated by this proto file to perform metadata request retrieval. In this mode, the amount
  of data transmitted for metadata retrieval is no longer a problem, so more parameters can be extended
  in the metadata and more governance data can be exposed.
  Using this service can conveniently obtain metadata information of the application, such as the address and
  port number of the service provider, as well as data related to governance. These information can help
  developers better understand the running status and performance bottlenecks of the application, and thus
  optimize and adjust it. In addition, as the service supports multiple languages, it can be easily integrated
  with various types of applications and programming languages, thus enhancing its flexibility and applicability.
*/
service Metadata {
  // Retrieves metadata for a specific revision.
  rpc getMetadata(MetaRequest) returns (MetaResponse);
  // Retrieves all metadata.
  rpc getAllMetadata(AllMetaRequest) returns (AllMetaResponse);
}
