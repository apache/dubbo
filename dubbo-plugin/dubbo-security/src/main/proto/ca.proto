/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

import "google/protobuf/struct.proto";

// Keep this package for backward compatibility.
package org.apache.dubbo.auth.v1alpha1;

option go_package = "github.com/apache/dubbo-admin/ca/v1alpha1";
option java_multiple_files = true;

// Certificate request message. The authentication should be based on:
// 1. Bearer tokens carried in the side channel;
// 2. Client-side certificate via Mutual TLS handshake.
// Note: the service implementation is REQUIRED to verify the authenticated caller is authorize to
// all SANs in the CSR. The server side may overwrite any requested certificate field based on its
// policies.
message DubboCertificateRequest {
  // PEM-encoded certificate request.
  // The public key in the CSR is used to generate the certificate,
  // and other fields in the generated certificate may be overwritten by the CA.
  string csr = 1;
  string type = 2;

  // $hide_from_docs
  // Optional: Opaque metadata provided by the XDS node to Istio.
  // Supported metadata: WorkloadName, WorkloadIP, ClusterID
  google.protobuf.Struct metadata = 3;
}

// Certificate response message.
message DubboCertificateResponse {
  // PEM-encoded certificate chain.
  // The leaf cert is the first element, and the root cert is the last element.
  string public_key = 1;
  repeated string trust_certs = 2;
  int64 expire_time = 3;
}

// Service for managing certificates issued by the CA.
service DubboCertificateService {
  // Using provided CSR, returns a signed certificate.
  rpc CreateCertificate(DubboCertificateRequest)
      returns (DubboCertificateResponse) {
  }
}
