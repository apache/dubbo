/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.dubbo.common.bytecode;

import org.apache.dubbo.common.bytecode.ClassGenerator.DC;

public class TestClass extends BaseClass implements DC, BaseInterface {
    public static volatile String staticAttr = "defaultVal";
    protected volatile String strAttr;
    private volatile int intAttr;

    public void setStrAttr(String var1, int var2) throws Throwable, RuntimeException {
        this.strAttr = var1;
    }

    public void setIntAttr(String var1, int var2) throws Throwable, RuntimeException {
        this.intAttr = var2;
    }

    public String getStrAttr() throws Throwable, RuntimeException {
        return this.strAttr;
    }

    public int getIntAttr() throws Throwable, RuntimeException {
        return this.intAttr;
    }

    public String baseClassMethod() {
        return "method comes from BaseClass";
    }

    public TestClass() {
    }

    public TestClass(String var1, int var2) throws Throwable, RuntimeException {
        this.strAttr = var1;
        this.intAttr = var2;
    }

    public TestClass(StringBuilder sb) {
        sb.append("constructor comes from BaseClass");
    }
}

