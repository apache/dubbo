{{#packageName}}
    package {{packageName}};
{{/packageName}}

import org.apache.dubbo.common.stream.StreamObserver;
import com.google.protobuf.Message;

import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;

public interface {{interfaceClassName}} {

{{#unaryMethods}}
    {{#javaDoc}}
        {{{javaDoc}}}
    {{/javaDoc}}
    {{outputType}} {{methodName}}({{inputType}} request);

    {{#javaDoc}}
        {{{javaDoc}}}
    {{/javaDoc}}
    /**
    * This server stream type unary method is <b>only</b> used for generated stub to support async unary method.
    * It will not be called if you are NOT using Dubbo3 generated triple stub and <b>DO NOT</b> implement this method.
    */
    default void {{methodName}}({{inputType}} request, StreamObserver<{{outputType}}> responseObserver){
      try {
          {{outputType}} response = {{methodName}}(request);
          responseObserver.onNext(response);
          responseObserver.onCompleted();
      } catch (Throwable t) {
        responseObserver.onError(t);
      }
    }

{{/unaryMethods}}

{{#serverStreamingMethods}}
    {{#javaDoc}}
        {{{javaDoc}}}
    {{/javaDoc}}
    void {{methodName}}({{inputType}} request, StreamObserver<{{outputType}}> responseObserver);
{{/serverStreamingMethods}}

{{#biStreamingWithoutClientStreamMethods}}
    {{#javaDoc}}
        {{{javaDoc}}}
    {{/javaDoc}}
    StreamObserver<{{inputType}}> {{methodName}}(StreamObserver<{{outputType}}> responseObserver);
{{/biStreamingWithoutClientStreamMethods}}


{{#clientStreamingMethods}}
    {{#javaDoc}}
        {{{javaDoc}}}
    {{/javaDoc}}
    StreamObserver<{{inputType}}> {{methodName}}(StreamObserver<{{outputType}}> responseObserver);
{{/clientStreamingMethods}}

}
