{{#packageName}}
    package {{packageName}};
{{/packageName}}

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.atomic.AtomicBoolean;

{{#deprecated}}
    @java.lang.Deprecated
{{/deprecated}}
@javax.annotation.Generated(
value = "by Dubbo generator",
comments = "Source: {{protoName}}")
public final class {{className}} {
private static final AtomicBoolean registered = new AtomicBoolean();

private static Class<?> init() {
Class<?> clazz = null;
try {
clazz = Class.forName({{serviceName}}Dubbo.class.getName());
if (registered.compareAndSet(false, true)) {
{{#methodTypes}}
    org.apache.dubbo.common.serialize.protobuf.support.ProtobufUtils.marshaller(
    {{.}}.getDefaultInstance());
{{/methodTypes}}
}
} catch (ClassNotFoundException e) {
// ignore
}
return clazz;
}

private {{serviceName}}Dubbo() {}

public static final String SERVICE_NAME = "{{packageName}}.{{serviceName}}";

/**
* Code generated for Dubbo
*/
public interface I{{serviceName}} {

static Class<?> clazz = init();

{{#methods}}
    {{outputType}} {{methodName}}({{inputType}} request);

    CompletableFuture<{{outputType}}> {{methodName}}Async({{inputType}} request);

{{/methods}}

}

}
